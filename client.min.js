import React from "react";
import ReactDOM from "react-dom";

import Footer from "./Footer";
// idk why but these should be alphabetized..
import Header from "./components/Header";

// we capitalize as a standard because they're constructors
// the header isn't a rendered dom element yet,
// BUT HAS THE CAPACITY TO BE RENDERED
// if you want to render multiple version of something....
// you can make an array of three dom elements
// ie...
// var list = [
//     <Header />,
//     <Header />,
//     <Header />,
// ];
// return (
//     <div>
//         {list}
//     </div>
// )
// you'd do this if your main was an unordered list or something
// and each thing was an li-- which its own specific info passed in

const app = document.getElementById('app');
ReactDOM.render(<Layout/>, app);

export default class Layout extends React.Component {
    constructor() {
        super();
        this.state = {name: 'Nat'}
        // WHENEVER STATE CHANGES ON A COMPONENT
        // THE COMPONENT WILL AUTOMATICALLY RE-RENDER
        // AND UPDATE THE DOM IF THERE ARE ANY CHANGES
        // --- IF NO CHANGES, THE DOM WON'T BE TOUCHED AT ALL
        //
        // REACT MANAGES A VIRTUAL DOM FOR YOU
        // WHENEVER REACT RENDERS OUT ALL THE COMPONENTS
        // -- the component tree (the layout, header, footer, etc)
        // then looks for changes from virtual DOM to ACTUAL DOM
        // if there are changes,
        // then it will UPDATE ONLY THE AFFECTED NODES IN THE MOST EFFICIENT WAY
        // if no changes,
        // it doesn't even touch the webpage.

        // js is fast, but DOM is soooo slow
        // a virtual DOM allows apps to be super fast

        // we can change the state with a set timeout
    }
    render() {
        setTimeout(() => {
            this.setState({name: "Bob"})
        }, 1000)
        return (
            <div>
                {this.state.name}
                <Header />
                <Footer />
                {/*it's capitalized and components can render anywhere in the html*/}
            </div>
        );
    }
}

// data is handled through STATE and PROPS

// STATE
// you'll use PROPS a lot more though