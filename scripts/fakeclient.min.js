// run npm install
// run webpack
// run webpack --watch
// later... npm install -S webpack-dev-server
// ./node_modules/.bin/webpack-dev-server --content-base src --inline --hot
// ^you wanna serve the source as the content-base-- so index.html will be the root
// inline is live reload (--inline --hot)
// take care of package with ("./node_modules/.bin/")
// ^ keeps you from having to install every time
// ^ run this with a node script

import React from "react";

import ReactDOM from "react-dom";
// this is a rendering engine
// you don't even have to render to html-- could render to a string
// could render to the DOM (our active webpage)

// and the actual RENDERING ENGINE
// IS SEPARATE from the react syntax
// which makes your code versatile to native apps etc

// ==============

// first your going to make a layout component or class
//  by extending the react component
// CORE CONCEPT::: EVERYTHING IS A COMPONENT
// if you look in index.html, everything is an element
// in REACT, everything is a component instead of an element

class Layout extends React.Component {
    // at the very basic-- you need a render method for a component
    // the render method says what we're spitting out

    // you can also do a constructor method, but have to call super on first line   
    constructor() {
        super();
        this.name = "Nat";
    }

    // getVal() {
    // a method here keeps things clean in the return
    // }

    render() {
        // const name = "Nat";
        // you can do basic logic here, like anonymous functions or getVal()
        // but honestly, keep this clean usually....
        // better to just MAKE A METHOD ON YOUR CLASS IN THE BLOCK ABOVE

        return (
        // the jsx part of it (scary at first)--
        // anything wrapped in parens can CONVERT HTML TO JS TO CREATE AN ELEMENT
        // COMPONENTS RETURN EXACTLY ONE DOM ELEMENT!!!!!!!
        // just like in html, everything has to have one parent dom element
        // not more than that! if you want more to display, you need to wrap them in a div
        
        <div>
            {/* <h1>this.getVal()</h1>  */}
            <h1>it's {this.name}</h1>
            <h1>it's {3+2}!</h1>
            <h1>is {name} good at programming?... i'll find out after installing webpack..</h1>
        </div>
        
        );
    }
}

// var div = document.createElement("div");
// div.innerHTML = "some content";
// jsx ^ transpiles to this stuff
// you're blending html and js but in a cool way
// js creates html elements all the time, and this makes it easy
// if you ever want to render a component-- you use it as if it were an HTML TAG****

const app = document.getElementByID('app');

ReactDOM.render(<Layout/>, app);

